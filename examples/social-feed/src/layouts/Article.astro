---
import { Image } from 'astro:assets';
import type { CollectionEntry } from 'astro:content';
import getReadingTime from 'reading-time';
import Layout, { type Props as LayoutProps } from './Base.astro';
import FormattedDate from '../components/FormattedDate.astro';
import TagList from '../components/TagList.astro';
import Icon from '../components/Icon.astro';

export interface Props extends LayoutProps {
	article: CollectionEntry<'posts'>;
	next?: CollectionEntry<'posts'>;
	prev?: CollectionEntry<'posts'>;
}

const { article, next, prev } = Astro.props;

const { Content, headings } = await article.render();

const readingTime = getReadingTime(article.body).text;
---

<Layout ...Astro.props} wrapperReverse>
	<header>
		<a href="/" class="back">
			<Icon icon="arrow-left" color="var(--theme-accent-dark)" size="1.25rem" />
			<span>Back to feed</span>
		</a>
		{article.data.cover && <Image src={article.data.cover.src} alt={article.data.cover.alt} class="cover" />}
		<div class="meta">
			<FormattedDate date={article.data.pubDate} />
			<span>â€¢</span>
			<p>
				<Icon icon="clock" size="1rem" />
				<span>{readingTime}</span>
			</p>
		</div>
		<h1>{article.data.title}</h1>
		{article.data.tags?.length > 0 && (
			<TagList tags={article.data.tags} />
		)}
	</header>
	<div class="content">
		<Content />
	</div>
	{headings.length > 0 && (
		<aside>
			<h3>Table of contents</h3>
			<ul>
				{headings.map(({ slug, text }) => (
					<li>
						<a href={`${Astro.url.pathname}#${slug}`}>{text}</a>
					</li>
				))}
			</ul>
		</aside>
	)}
	{(next || prev) && (
		<footer>		
			{prev && <a href={`/post/${prev.slug}`} class="prev">
				<Icon icon="arrow-left" size="1.25rem" color="var(--theme-accent-dark)" />
				<span>Previous: {prev.data.title}</span>
			</a>}
			{next && <a href={`/post/${next.slug}`} class="next">
				<span>Next: {next.data.title}</span>
				<Icon icon="arrow-right" size="1.25rem" color="var(--theme-accent-dark)" />
			</a>}
		</footer>
	)}
</Layout>

<style>
	header, footer {
		grid-column: 1 / -1;
	}

	header {
		display: flex;
		flex-direction: column;
		gap: 1rem;
	}

	.content > :global(* + *) {
		margin-block-start: 1em;
	}

	.content > :global(p:first-child::first-letter) {
		float: left;
		font-size: 3.5rem;
		padding-inline-end: .5rem;
		padding-block-start: .35rem;
		font-weight: bold;
	}

	.content :global(img, video, figure) {
		margin-inline: auto;
	}

	.meta {
		display: flex;
		align-items: center;
		gap: 1rem;
		font-size: var(--theme-text-sm);
		color: var(--theme-gray-200);
	}

	.meta svg {
		margin-block-end: 0.25rem;
	}

	.back {
		text-decoration: none;
		font-weight: bold;
	}

	.back {
		display: flex;
		align-items: center;
		gap: 0.5rem;
		margin-inline-start: -4px;
	}

	.cover {
		height: auto;
		aspect-ratio: 2.777;
		object-fit: cover;
		border-radius: 1.25rem;
		margin-block-start: 0.5rem;
	}

	footer {
		display: flex;
		justify-content: space-between;
	}

	footer a {
		font-weight: 700;
		text-decoration: none;
	}

	.next:first-child {
		margin-inline-start: auto;
	}

	aside {
		display: none;
	}

	aside ul {
		list-style: none;
		padding: 0;
		margin-top: 1.25em;
	}

	aside ul > * + * {
		margin-block-start: 0.75em;
	}

	aside a {
		font-weight: bold;
		text-decoration: none;
	}

	@media (min-width: 50em) {
		aside {
			display: block;
		}

		.content > :global(* + *) {
			margin-block-start: 1.5em;
		}
	}
</style>
